name: Build discrete-optimization

on:
  push:
    branches:
      - "**"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout source code
          uses: actions/checkout@v2
        - name: install build dependencies
          run: pip install -U setuptools wheel
        - name: Build discrete-optimization wheel
          run: python setup.py bdist_wheel
        - name: Upload as build artifacts
          uses: actions/upload-artifact@v2
          with:
            name: wheels
            path: dist/*.whl

  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.7", "3.8"]
        include:
          - os: "ubuntu-latest"
            minizinc_path: $(pwd)/bin
            minizinc_cache_path: $(pwd)/bin/minizinc
            minizinc_url: https://github.com/MiniZinc/MiniZincIDE/releases/download/2.5.5/MiniZincIDE-2.5.5-x86_64.AppImage
            minizinc_downloaded_filepath: bin/minizinc
            minizinc_install_cmdline: sudo chmod +x bin/minizinc
          - os: "macos-latest"
            minizinc_path: $(pwd)/bin/MiniZincIDE.app/Contents/Resources
            minizinc_cache_path: $(pwd)/bin/MiniZincIDE.app
            minizinc_url: https://github.com/MiniZinc/MiniZincIDE/releases/download/2.5.5/MiniZincIDE-2.5.5-bundled.dmg
            minizinc_downloaded_filepath: bin/minizinc.dmg
            minizinc_install_cmdline: sudo hdiutil attach bin/minizinc.dmg; sudo cp -R /Volumes/MiniZinc*/MiniZincIDE.app bin/.
          - os: "windows-latest"
            minizinc_path: ~/AppData/Local/Programs/MiniZinc
            minizinc_cache_path: ~/AppData/Local/Programs/MiniZinc
            minizinc_url: https://github.com/MiniZinc/MiniZincIDE/releases/download/2.5.5/MiniZincIDE-2.5.5-bundled-setup-win64.exe
            minizinc_downloaded_filepath: minizinc_setup.exe
            minizinc_install_cmdline: minizinc_setup.exe /VERYSILENT /CURRENTUSER /NORESTART /SUPPRESSMSGBOXES /SP
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout discrete-optimization source code
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: wheels
      - name: Create bin/
        run: mkdir -p bin
      - name: get MininZinc path to cache
        id: get-mzn-cache-path
        run: |
          echo "::set-output name=path::${{ matrix.minizinc_cache_path }}"
      - name: Restore MiniZinc cache
        id: cache-minizinc
        uses: actions/cache@v2
        with:
          path: ${{ steps.get-mzn-cache-path.outputs.path }}
          key: ${{ matrix.minizinc_url }}
      - name: Download MiniZinc
        if: steps.cache-minizinc.outputs.cache-hit != 'true'
        run: |
          curl -o "${{ matrix.minizinc_downloaded_filepath }}" -L ${{ matrix.minizinc_url }}
      - name: Install MiniZinc
        if: steps.cache-minizinc.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          ${{ matrix.minizinc_install_cmdline }}
      - name: Add MiniZinc to PATH
        run: |
          echo ${{ matrix.minizinc_path }}
          echo ${{ matrix.minizinc_path }} >> $GITHUB_PATH
      - name: Test minizinc install
        run: |
          minizinc --version
      - name: Get pip cache dir
        id: get-pip-cache-dir
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Restore pip cache
        id: cache-pip
        uses: actions/cache@v2
        with:
          path: ${{ steps.get-pip-cache-dir.outputs.dir }}
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-
      - name: Install test dependencies
        run: |
          python -m pip install -U pip
          wheelfile=$(ls ./wheels/discrete_optimization*.whl)
          pip install ${wheelfile}[test]
      - name: Restore tests data cache
        id: cache-data
        uses: actions/cache@v2
        with:
          path: ~/discrete_optimization_data
          key: data-${{ hashFiles('discrete_optimization/datasets.py') }}
      - name: Fetch data for tests
        if: steps.cache-data.outputs.cache-hit != 'true'
        shell: python3 {0}
        run: |
          from discrete_optimization.datasets import fetch_data_from_coursera, fetch_data_for_rcpsp
          fetch_data_from_coursera()
          fetch_data_for_rcpsp()
      - name: Test with pytest
        run: |
          export PATH=$PATH:${{ matrix.minizinc_path }}
          NUMBA_BOUNDSCHECK=1 pytest tests_clean
